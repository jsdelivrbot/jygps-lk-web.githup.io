<template>
  <div class="content-container">
    <section>
      <!--查询工具条-->
      <el-col :span="24" class="toolbar" style="padding-bottom: 0px;">
        <el-form :inline="true" :model="filters" class="demo-form-inline">
          <el-form-item label="公司列表">
            <el-select v-model="select" filterable placeholder="请选择">
              <el-option v-for="item in oprations" :key="item.index" :label="item.name" :value="item.id" ref="dataInfo">
              </el-option>
            </el-select>
          </el-form-item>
          <el-form-item label="节点名称">
            <el-input v-model="filters.name" placeholder="输入节点名称"></el-input>
          </el-form-item>
          <el-form-item>
            <!-- 查询 -->
            <el-button type="primary" @click="getUsers">查询</el-button>
          </el-form-item>
          <el-form-item style="float:right;cursor: pointer;">
            <i>
              <img src="../../assets/icon/pdf.png">
            </i>
            <span type="primary" @click="getPdf()">Pdf</span>
          </el-form-item>
          <el-form-item style="float:right;cursor: pointer;">
            <i>
              <img src="../../assets/icon/excel.png">
            </i>
            <span type="primary" @click="exportTable()">Excel</span>
          </el-form-item>
        </el-form>
      </el-col>
      <!-- 列表-新加了一个id用于PDF导出 -->
      <el-table class="row" id="pdfDom" :data="allnum" width="100%" :height="windowHeigh" highlight-current-row style="border-right:solid 1px #dfe6ec"
        @selection-change="selsChange">
        <!-- 选择的按钮 -->
        <el-table-column type="selection" width="55" fixed="left">
        </el-table-column>
        <!--<el-table-column type="index" label="序号" width="80">
      </el-table-column>-->
        <el-table-column prop="nodename" label="节点名称" width="150" fixed="left" :show-overflow-tooltip="true">
          <!-- <div slot-scope>{{allnum.nodename}}</div> -->
        </el-table-column>
        <el-table-column prop="tmpUpdateTime" label="更新时间" width="180" sortable>
        </el-table-column>
        <el-table-column prop="tmp1Current" label="温度（℃）" width="120">
        </el-table-column>
        <el-table-column prop="humidityCurrent" label="湿度（%）" width="120">
        </el-table-column>
        <el-table-column label="状态" min-width="120">
          <template slot-scope="scope">
            <span class="green" v-if="scope.row.timeoutflag === 0">在线</span>
            <span v-else>离线</span>
          </template>
        </el-table-column>
        <el-table-column label="报警状态" min-width="180" :show-overflow-tooltip="true">
          <template slot-scope="scope">
            <span v-if="scope.row.levels === 0">设备正常</span>
            <span class="red" v-else>正在报警</span>
          </template>
        </el-table-column>
        <el-table-column prop="unitName" label="所属冷库" min-width="180" :show-overflow-tooltip="true">
        </el-table-column>
        <el-table-column prop="voltageCurrent" label="电压" min-width="180">
        </el-table-column>
        <el-table-column prop="signalStrength" label="GPRS信号强度" min-width="180">
        </el-table-column>
        <el-table-column prop="waveSignalStrength" label="短波信号强度" min-width="180">
        </el-table-column>
        <el-table-column prop="coreUpdateTime" label="主机更新时间" min-width="180">
        </el-table-column>
        <el-table-column prop="corePowerStatus" label="主机电源状态" min-width="180">
        </el-table-column>
        <el-table-column prop="installpos" label="安装位置" min-width="180">
        </el-table-column>
        <el-table-column label="操作" width="80" fixed="right" size="small">
          <template slot-scope="scope">
            <span style="color: #328fea; display: inline-block; cursor: pointer; " @click="clickShwo(scope.$index, scope.row)"> 趋势线 </span>
          </template>
        </el-table-column>
      </el-table>
      <div class="footer-bottom">
        <!--分页-->
        <el-col :span="24" class="toolbar-bot">
          <span class="demonstration" style="float: left; margin-top: 10px;">共:{{total}}条</span>
          <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page="currentPage1"
            :page-size="size" layout="prev, pager, next, jumper" :total="total">
          </el-pagination>
        </el-col>
      </div>
    </section>
    <el-dialog title="提示" :visible.sync="popShowInfo" width="30%" center>
      <div>
        <span>需要注意的是内容是默认不居中的</span>
      </div>
    </el-dialog>
  </div>
</template>
<script>
  var liuHeight=document.documentElement.clientHeight-220;
  import util from "../../common/js/util";
  // 引入PDF导出功能
  import htmlToPdf from "../../components/htmlToPdf/htmlToPdf";
  // import trendss from "./trendss";
  import {
    getUserListPage,
    removeUser,
    batchRemoveUser,
    editUser,
    addUser,
    allNode,
    unitTree,
    nodeinfo
  } from "../../api/api";
  export default {
    data() {
      return {
        // 趋势图传的节点id
        // nodeid: "11",
        htmlTitle: "页面导出PDF文件名",
        select: "",
        filters: {
          plate: "",
          name: ""
        },
        windowHeigh:"",
        //声明公司id
        unitIds: "",
        //声明所有节点名
        nodename: "",
        //查询后得到的所有数据
        allnum: [],
        oprations: [],
        users: [],
        currentPage1: 1,
        total: 0,
        page: 1,
        size: 20,
        listLoading: false,
        sels: [], //列表选中列
        popShowInfo: false
      };
    },
    //加载之前调用
    created: function () {
      this.windowHeigh=liuHeight;

      allNode().then(data => {
        if (data.data.code == -1) {
          this.$message({
            message: msg,
            type: "error"
          });
        } else {
          this.allnode = data.data.msg;
          console.log(this.allnode);
        }
      });
      //   获取所有公司名UnitTree
      unitTree().then(data => {
        if (data.data.code == -1) {
          this.$message({
            message: msg,
            type: "error"
          });
        } else {
          this.oprations = data.data.msg;
        }
      });
    },
    methods: {
      // excel导出
      exportTable() {
        require.ensure([], () => {
          const {
            export_json_to_excel
          } = require("../../vendor/Export2Excel");
          const tHeader = [
            "节点名称",
            "更新时间",
            "温度（℃）",
            "湿度（%）",
            "状态",
            "报警状态",
            "所属冷库",
            "电压",
            "GPRS信号强度",
            "短波信号强度",
            "主机更新时间",
            "主机电源状态",
            "安装位置"
          ];
          const filterVal = [
            "nodename",
            "dataupdatetime",
            "tmp1Current",
            "humidity",
            "timeoutflag",
            "levels",
            "unitName",
            "voltageCurrent",
            "signalStrength",
            "waveSignalStrength",
            "coreUpdateTime",
            "corePowerStatus",
            "installpos"
          ];
          const list = this.allnum;
          const data = this.formatJson(filterVal, list);
          export_json_to_excel(tHeader, data, "监控中心列表");
        });
      },
      formatJson(filterVal, jsonData) {
        return jsonData.map(v => filterVal.map(j => v[j]));
      },
      // excel导出结束
      handleSizeChange(val) {
        // alert(`每页 ${val} 条`);
        this.size = val;
        this.getUsers();
      },
      handleCurrentChange(val) {

        this.page = val;
        this.getUsers();
      },
      //跳转到趋势图
      clickShwo(index, row) {
        this.row = row;
        // this.nodeid = row.id;
        this.$router.push({
          name: 'trendss',
          params: {
            row:row
          }
        })

      },
      //公司列表查询
      getUsers(id) {
        var that = this;
        that.nodename = that.filters.name;
        let para = {
          page: this.page,
          size: this.size,
          unitIds: that.select,
          nodename: that.nodename
        };
        //查询的结果
        nodeinfo(para).then(res => {
          this.allnum = res.msg.rows;
          this.total = res.msg.total;
          // console.log(this.allnum);
        });
      }
    },
    mounted() {
      this.getUsers();
    }
  };
</script>
<style>
    .el-table__fixed{
    position: absolute!important;
    top: 0!important;
    left: 0!important;
    box-shadow:none!important;
    -moz-box-shadow:none!important;
    -webkit-box-shadow:none!important;
    -moz-box-shadow:none!important;
    overflow-x: hidden!important;
  }
  .el-table__fixed-right{
    position: absolute!important;
    top: 0!important;
    right: 0!important;
    box-shadow:none!important;
    -moz-box-shadow:none!important;
    -webkit-box-shadow:none!important;
    -moz-box-shadow:none!important;
    overflow-x: hidden!important;
  }
.el-input__inner{ height: 30px; font-size: 13px; }
.el-button{ padding: 7px 15px ; font-size: 13px;}
.el-table .cell, .el-table th{ font-size: 13px; }
.el-form-item__label{ font-size: 13px; }
.el-dialog__header{ background:#e4eafa; padding: 12px 20px;  }
.el-dialog{border-radius: 5px;overflow: hidden;}
.el-dialog__title{ color: #606266; font-weight:normal; font-size: 14px; }
</style>
<style scoped>
  .el-col {
    background: #fff;
  }

  .toolbar-bot {
    text-align: right;
    margin-top: 10px;
  }

  .toolbar {
    box-shadow: 0 0 6px 0 #dcdfe6;
  }

  .el-form-item i img {
    width: 20px;
    height: 14px;
    display: inline-block;
    vertical-align: middle;
  }

  .el-form-item span {
    color: #328fea;
    line-height: 21px;
    margin-right: 10px;
  }

  .el-table {
    margin-bottom: 80px;
  }

  .footer-bottom {
    position: fixed;
    padding: 0 0 10px 0;
    bottom: 0;
    left: 224px;
    width: 81%;
    background: #fff;
    z-index: 100;
  }

  .green {
    color: green;
  }

  .red {
    color: red;
  }

</style>